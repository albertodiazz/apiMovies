# Con esto corremos el servidor de DJANGO
# Junton con Gunicorn y Ngnix
version: '3.8'

services:

  data-movies:
    image: mongo:3.6.23 
    container_name: data-movies 
    restart: always
    volumes:
      - /var/lib/docker/volumes/dbmovies:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: dbmovies 
    networks:
      - django-network
        
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      # Cuando nos conectamos a mongo podemos linkearlo desde nuestro
      # nombre del contenedor
      ME_CONFIG_MONGODB_URL: mongodb://root:example@data-movies:27017/
    networks:
      - django-network

  movies-api:
    build: .
    container_name: movies-api 
    ports:
      - 8000:8000
    volumes: 
      - .:/app
    depends_on:
      - data-movies
    environment:
      - KEY=django-insecure-$pf%6_=k+j7w+vek83c4ig!cxn(qoka)l(b9n3p83pvhsm*s&z'
      - DEBUG=1
      - DB=dbmovies
    # command: python manage.py makemigrations
    command: python manage.py runserver 0.0.0.0:8000
    command: gunicorn --reload --bind 0.0.0.0:8000 movieScraper.wsgi:application
    networks:
      - django-network

  nginx-django:
    image: nginx:1.23.1-alpine
    container_name: nginx-django
    volumes:
      - ./network/nginx/default.conf:/etc/nginx/conf.d/default.conf
    restart: on-failure
    ports:
      - 80:80
    depends_on:
      - movies-api
    networks:
      - django-network

  broker-rabbitmq:
    image: rabbitmq:3.9.24
    container_name: broker-rabbitmq
    ports:
      - 5672:5672
    networks:
      - django-network

networks:
  django-network:
    name: django-network
